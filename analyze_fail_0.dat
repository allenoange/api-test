# [No.1] construct_wrapper.1
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(376)/    def construct(self, *inputs):/
funcgraph fg_1(
        %para1 : Tensor(F32)[256, 3, 32, 32]    # inputs0
        , %para2 : Tensor(I32)[256]    # inputs1
        , %para3 : Ref[Tensor(I32)][]    # step
        , %para4 : Ref[Tensor(F32)][32, 3, 3, 3]    # conv1.weight
        , %para5 : Ref[Tensor(F32)][32]    # bn1.gamma
        , %para6 : Ref[Tensor(F32)][32]    # bn1.beta
        , %para7 : Ref[Tensor(F32)][32, 1, 3, 3]    # layers.0.conv1.weight
        , %para8 : Ref[Tensor(F32)][32]    # layers.0.bn1.gamma
        , %para9 : Ref[Tensor(F32)][32]    # layers.0.bn1.beta
        , %para10 : Ref[Tensor(F32)][64, 32, 1, 1]    # layers.0.conv2.weight
        , %para11 : Ref[Tensor(F32)][64]    # layers.0.bn2.gamma
        , %para12 : Ref[Tensor(F32)][64]    # layers.0.bn2.beta
        , %para13 : Ref[Tensor(F32)][64, 1, 3, 3]    # layers.1.conv1.weight
        , %para14 : Ref[Tensor(F32)][64]    # layers.1.bn1.gamma
        , %para15 : Ref[Tensor(F32)][64]    # layers.1.bn1.beta
        , %para16 : Ref[Tensor(F32)][128, 64, 1, 1]    # layers.1.conv2.weight
        , %para17 : Ref[Tensor(F32)][128]    # layers.1.bn2.gamma
        , %para18 : Ref[Tensor(F32)][128]    # layers.1.bn2.beta
        , %para19 : Ref[Tensor(F32)][128, 1, 3, 3]    # layers.2.conv1.weight
        , %para20 : Ref[Tensor(F32)][128]    # layers.2.bn1.gamma
        , %para21 : Ref[Tensor(F32)][128]    # layers.2.bn1.beta
        , %para22 : Ref[Tensor(F32)][128, 128, 1, 1]    # layers.2.conv2.weight
        , %para23 : Ref[Tensor(F32)][128]    # layers.2.bn2.gamma
        , %para24 : Ref[Tensor(F32)][128]    # layers.2.bn2.beta
        , %para25 : Ref[Tensor(F32)][128, 1, 3, 3]    # layers.3.conv1.weight
        , %para26 : Ref[Tensor(F32)][128]    # layers.3.bn1.gamma
        , %para27 : Ref[Tensor(F32)][128]    # layers.3.bn1.beta
        , %para28 : Ref[Tensor(F32)][256, 128, 1, 1]    # layers.3.conv2.weight
        , %para29 : Ref[Tensor(F32)][256]    # layers.3.bn2.gamma
        , %para30 : Ref[Tensor(F32)][256]    # layers.3.bn2.beta
        , %para31 : Ref[Tensor(F32)][256, 1, 3, 3]    # layers.4.conv1.weight
        , %para32 : Ref[Tensor(F32)][256]    # layers.4.bn1.gamma
        , %para33 : Ref[Tensor(F32)][256]    # layers.4.bn1.beta
        , %para34 : Ref[Tensor(F32)][256, 256, 1, 1]    # layers.4.conv2.weight
        , %para35 : Ref[Tensor(F32)][256]    # layers.4.bn2.gamma
        , %para36 : Ref[Tensor(F32)][256]    # layers.4.bn2.beta
        , %para37 : Ref[Tensor(F32)][256, 1, 3, 3]    # layers.5.conv1.weight
        , %para38 : Ref[Tensor(F32)][256]    # layers.5.bn1.gamma
        , %para39 : Ref[Tensor(F32)][256]    # layers.5.bn1.beta
        , %para40 : Ref[Tensor(F32)][512, 256, 1, 1]    # layers.5.conv2.weight
        , %para41 : Ref[Tensor(F32)][512]    # layers.5.bn2.gamma
        , %para42 : Ref[Tensor(F32)][512]    # layers.5.bn2.beta
        , %para43 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.6.conv1.weight
        , %para44 : Ref[Tensor(F32)][512]    # layers.6.bn1.gamma
        , %para45 : Ref[Tensor(F32)][512]    # layers.6.bn1.beta
        , %para46 : Ref[Tensor(F32)][512, 512, 1, 1]    # layers.6.conv2.weight
        , %para47 : Ref[Tensor(F32)][512]    # layers.6.bn2.gamma
        , %para48 : Ref[Tensor(F32)][512]    # layers.6.bn2.beta
        , %para49 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.7.conv1.weight
        , %para50 : Ref[Tensor(F32)][512]    # layers.7.bn1.gamma
        , %para51 : Ref[Tensor(F32)][512]    # layers.7.bn1.beta
        , %para52 : Ref[Tensor(F32)][512, 512, 1, 1]    # layers.7.conv2.weight
        , %para53 : Ref[Tensor(F32)][512]    # layers.7.bn2.gamma
        , %para54 : Ref[Tensor(F32)][512]    # layers.7.bn2.beta
        , %para55 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.8.conv1.weight
        , %para56 : Ref[Tensor(F32)][512]    # layers.8.bn1.gamma
        , %para57 : Ref[Tensor(F32)][512]    # layers.8.bn1.beta
        , %para58 : Ref[Tensor(F32)][512, 512, 1, 1]    # layers.8.conv2.weight
        , %para59 : Ref[Tensor(F32)][512]    # layers.8.bn2.gamma
        , %para60 : Ref[Tensor(F32)][512]    # layers.8.bn2.beta
        , %para61 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.9.conv1.weight
        , %para62 : Ref[Tensor(F32)][512]    # layers.9.bn1.gamma
        , %para63 : Ref[Tensor(F32)][512]    # layers.9.bn1.beta
        , %para64 : Ref[Tensor(F32)][512, 512, 1, 1]    # layers.9.conv2.weight
        , %para65 : Ref[Tensor(F32)][512]    # layers.9.bn2.gamma
        , %para66 : Ref[Tensor(F32)][512]    # layers.9.bn2.beta
        , %para67 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.10.conv1.weight
        , %para68 : Ref[Tensor(F32)][512]    # layers.10.bn1.gamma
        , %para69 : Ref[Tensor(F32)][512]    # layers.10.bn1.beta
        , %para70 : Ref[Tensor(F32)][512, 512, 1, 1]    # layers.10.conv2.weight
        , %para71 : Ref[Tensor(F32)][512]    # layers.10.bn2.gamma
        , %para72 : Ref[Tensor(F32)][512]    # layers.10.bn2.beta
        , %para73 : Ref[Tensor(F32)][512, 1, 3, 3]    # layers.11.conv1.weight
        , %para74 : Ref[Tensor(F32)][512]    # layers.11.bn1.gamma
        , %para75 : Ref[Tensor(F32)][512]    # layers.11.bn1.beta
        , %para76 : Ref[Tensor(F32)][1024, 512, 1, 1]    # layers.11.conv2.weight
        , %para77 : Ref[Tensor(F32)][1024]    # layers.11.bn2.gamma
        , %para78 : Ref[Tensor(F32)][1024]    # layers.11.bn2.beta
        , %para79 : Ref[Tensor(F32)][1024, 1, 3, 3]    # layers.12.conv1.weight
        , %para80 : Ref[Tensor(F32)][1024]    # layers.12.bn1.gamma
        , %para81 : Ref[Tensor(F32)][1024]    # layers.12.bn1.beta
        , %para82 : Ref[Tensor(F32)][1024, 1024, 1, 1]    # layers.12.conv2.weight
        , %para83 : Ref[Tensor(F32)][1024]    # layers.12.bn2.gamma
        , %para84 : Ref[Tensor(F32)][1024]    # layers.12.bn2.beta
        , %para85 : Ref[Tensor(F32)][10, 1024]    # linear.weight
        , %para86 : Ref[Tensor(F32)][10]    # linear.bias
        , %para87 : Ref[Tensor(F32)][1]    # beta1_power
        , %para88 : Ref[Tensor(F32)][1]    # beta2_power
        , %para89 : Ref[Tensor(F32)][32, 3, 3, 3]    # moment1.conv1.weight
        , %para90 : Ref[Tensor(F32)][32]    # moment1.bn1.gamma
        , %para91 : Ref[Tensor(F32)][32]    # moment1.bn1.beta
        , %para92 : Ref[Tensor(F32)][32, 1, 3, 3]    # moment1.layers.0.conv1.weight
        , %para93 : Ref[Tensor(F32)][32]    # moment1.layers.0.bn1.gamma
        , %para94 : Ref[Tensor(F32)][32]    # moment1.layers.0.bn1.beta
        , %para95 : Ref[Tensor(F32)][64, 32, 1, 1]    # moment1.layers.0.conv2.weight
        , %para96 : Ref[Tensor(F32)][64]    # moment1.layers.0.bn2.gamma
        , %para97 : Ref[Tensor(F32)][64]    # moment1.layers.0.bn2.beta
        , %para98 : Ref[Tensor(F32)][64, 1, 3, 3]    # moment1.layers.1.conv1.weight
        , %para99 : Ref[Tensor(F32)][64]    # moment1.layers.1.bn1.gamma
        , %para100 : Ref[Tensor(F32)][64]    # moment1.layers.1.bn1.beta
        , %para101 : Ref[Tensor(F32)][128, 64, 1, 1]    # moment1.layers.1.conv2.weight
        , %para102 : Ref[Tensor(F32)][128]    # moment1.layers.1.bn2.gamma
        , %para103 : Ref[Tensor(F32)][128]    # moment1.layers.1.bn2.beta
        , %para104 : Ref[Tensor(F32)][128, 1, 3, 3]    # moment1.layers.2.conv1.weight
        , %para105 : Ref[Tensor(F32)][128]    # moment1.layers.2.bn1.gamma
        , %para106 : Ref[Tensor(F32)][128]    # moment1.layers.2.bn1.beta
        , %para107 : Ref[Tensor(F32)][128, 128, 1, 1]    # moment1.layers.2.conv2.weight
        , %para108 : Ref[Tensor(F32)][128]    # moment1.layers.2.bn2.gamma
        , %para109 : Ref[Tensor(F32)][128]    # moment1.layers.2.bn2.beta
        , %para110 : Ref[Tensor(F32)][128, 1, 3, 3]    # moment1.layers.3.conv1.weight
        , %para111 : Ref[Tensor(F32)][128]    # moment1.layers.3.bn1.gamma
        , %para112 : Ref[Tensor(F32)][128]    # moment1.layers.3.bn1.beta
        , %para113 : Ref[Tensor(F32)][256, 128, 1, 1]    # moment1.layers.3.conv2.weight
        , %para114 : Ref[Tensor(F32)][256]    # moment1.layers.3.bn2.gamma
        , %para115 : Ref[Tensor(F32)][256]    # moment1.layers.3.bn2.beta
        , %para116 : Ref[Tensor(F32)][256, 1, 3, 3]    # moment1.layers.4.conv1.weight
        , %para117 : Ref[Tensor(F32)][256]    # moment1.layers.4.bn1.gamma
        , %para118 : Ref[Tensor(F32)][256]    # moment1.layers.4.bn1.beta
        , %para119 : Ref[Tensor(F32)][256, 256, 1, 1]    # moment1.layers.4.conv2.weight
        , %para120 : Ref[Tensor(F32)][256]    # moment1.layers.4.bn2.gamma
        , %para121 : Ref[Tensor(F32)][256]    # moment1.layers.4.bn2.beta
        , %para122 : Ref[Tensor(F32)][256, 1, 3, 3]    # moment1.layers.5.conv1.weight
        , %para123 : Ref[Tensor(F32)][256]    # moment1.layers.5.bn1.gamma
        , %para124 : Ref[Tensor(F32)][256]    # moment1.layers.5.bn1.beta
        , %para125 : Ref[Tensor(F32)][512, 256, 1, 1]    # moment1.layers.5.conv2.weight
        , %para126 : Ref[Tensor(F32)][512]    # moment1.layers.5.bn2.gamma
        , %para127 : Ref[Tensor(F32)][512]    # moment1.layers.5.bn2.beta
        , %para128 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.6.conv1.weight
        , %para129 : Ref[Tensor(F32)][512]    # moment1.layers.6.bn1.gamma
        , %para130 : Ref[Tensor(F32)][512]    # moment1.layers.6.bn1.beta
        , %para131 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment1.layers.6.conv2.weight
        , %para132 : Ref[Tensor(F32)][512]    # moment1.layers.6.bn2.gamma
        , %para133 : Ref[Tensor(F32)][512]    # moment1.layers.6.bn2.beta
        , %para134 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.7.conv1.weight
        , %para135 : Ref[Tensor(F32)][512]    # moment1.layers.7.bn1.gamma
        , %para136 : Ref[Tensor(F32)][512]    # moment1.layers.7.bn1.beta
        , %para137 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment1.layers.7.conv2.weight
        , %para138 : Ref[Tensor(F32)][512]    # moment1.layers.7.bn2.gamma
        , %para139 : Ref[Tensor(F32)][512]    # moment1.layers.7.bn2.beta
        , %para140 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.8.conv1.weight
        , %para141 : Ref[Tensor(F32)][512]    # moment1.layers.8.bn1.gamma
        , %para142 : Ref[Tensor(F32)][512]    # moment1.layers.8.bn1.beta
        , %para143 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment1.layers.8.conv2.weight
        , %para144 : Ref[Tensor(F32)][512]    # moment1.layers.8.bn2.gamma
        , %para145 : Ref[Tensor(F32)][512]    # moment1.layers.8.bn2.beta
        , %para146 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.9.conv1.weight
        , %para147 : Ref[Tensor(F32)][512]    # moment1.layers.9.bn1.gamma
        , %para148 : Ref[Tensor(F32)][512]    # moment1.layers.9.bn1.beta
        , %para149 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment1.layers.9.conv2.weight
        , %para150 : Ref[Tensor(F32)][512]    # moment1.layers.9.bn2.gamma
        , %para151 : Ref[Tensor(F32)][512]    # moment1.layers.9.bn2.beta
        , %para152 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.10.conv1.weight
        , %para153 : Ref[Tensor(F32)][512]    # moment1.layers.10.bn1.gamma
        , %para154 : Ref[Tensor(F32)][512]    # moment1.layers.10.bn1.beta
        , %para155 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment1.layers.10.conv2.weight
        , %para156 : Ref[Tensor(F32)][512]    # moment1.layers.10.bn2.gamma
        , %para157 : Ref[Tensor(F32)][512]    # moment1.layers.10.bn2.beta
        , %para158 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment1.layers.11.conv1.weight
        , %para159 : Ref[Tensor(F32)][512]    # moment1.layers.11.bn1.gamma
        , %para160 : Ref[Tensor(F32)][512]    # moment1.layers.11.bn1.beta
        , %para161 : Ref[Tensor(F32)][1024, 512, 1, 1]    # moment1.layers.11.conv2.weight
        , %para162 : Ref[Tensor(F32)][1024]    # moment1.layers.11.bn2.gamma
        , %para163 : Ref[Tensor(F32)][1024]    # moment1.layers.11.bn2.beta
        , %para164 : Ref[Tensor(F32)][1024, 1, 3, 3]    # moment1.layers.12.conv1.weight
        , %para165 : Ref[Tensor(F32)][1024]    # moment1.layers.12.bn1.gamma
        , %para166 : Ref[Tensor(F32)][1024]    # moment1.layers.12.bn1.beta
        , %para167 : Ref[Tensor(F32)][1024, 1024, 1, 1]    # moment1.layers.12.conv2.weight
        , %para168 : Ref[Tensor(F32)][1024]    # moment1.layers.12.bn2.gamma
        , %para169 : Ref[Tensor(F32)][1024]    # moment1.layers.12.bn2.beta
        , %para170 : Ref[Tensor(F32)][10, 1024]    # moment1.linear.weight
        , %para171 : Ref[Tensor(F32)][10]    # moment1.linear.bias
        , %para172 : Ref[Tensor(F32)][32, 3, 3, 3]    # moment2.conv1.weight
        , %para173 : Ref[Tensor(F32)][32]    # moment2.bn1.gamma
        , %para174 : Ref[Tensor(F32)][32]    # moment2.bn1.beta
        , %para175 : Ref[Tensor(F32)][32, 1, 3, 3]    # moment2.layers.0.conv1.weight
        , %para176 : Ref[Tensor(F32)][32]    # moment2.layers.0.bn1.gamma
        , %para177 : Ref[Tensor(F32)][32]    # moment2.layers.0.bn1.beta
        , %para178 : Ref[Tensor(F32)][64, 32, 1, 1]    # moment2.layers.0.conv2.weight
        , %para179 : Ref[Tensor(F32)][64]    # moment2.layers.0.bn2.gamma
        , %para180 : Ref[Tensor(F32)][64]    # moment2.layers.0.bn2.beta
        , %para181 : Ref[Tensor(F32)][64, 1, 3, 3]    # moment2.layers.1.conv1.weight
        , %para182 : Ref[Tensor(F32)][64]    # moment2.layers.1.bn1.gamma
        , %para183 : Ref[Tensor(F32)][64]    # moment2.layers.1.bn1.beta
        , %para184 : Ref[Tensor(F32)][128, 64, 1, 1]    # moment2.layers.1.conv2.weight
        , %para185 : Ref[Tensor(F32)][128]    # moment2.layers.1.bn2.gamma
        , %para186 : Ref[Tensor(F32)][128]    # moment2.layers.1.bn2.beta
        , %para187 : Ref[Tensor(F32)][128, 1, 3, 3]    # moment2.layers.2.conv1.weight
        , %para188 : Ref[Tensor(F32)][128]    # moment2.layers.2.bn1.gamma
        , %para189 : Ref[Tensor(F32)][128]    # moment2.layers.2.bn1.beta
        , %para190 : Ref[Tensor(F32)][128, 128, 1, 1]    # moment2.layers.2.conv2.weight
        , %para191 : Ref[Tensor(F32)][128]    # moment2.layers.2.bn2.gamma
        , %para192 : Ref[Tensor(F32)][128]    # moment2.layers.2.bn2.beta
        , %para193 : Ref[Tensor(F32)][128, 1, 3, 3]    # moment2.layers.3.conv1.weight
        , %para194 : Ref[Tensor(F32)][128]    # moment2.layers.3.bn1.gamma
        , %para195 : Ref[Tensor(F32)][128]    # moment2.layers.3.bn1.beta
        , %para196 : Ref[Tensor(F32)][256, 128, 1, 1]    # moment2.layers.3.conv2.weight
        , %para197 : Ref[Tensor(F32)][256]    # moment2.layers.3.bn2.gamma
        , %para198 : Ref[Tensor(F32)][256]    # moment2.layers.3.bn2.beta
        , %para199 : Ref[Tensor(F32)][256, 1, 3, 3]    # moment2.layers.4.conv1.weight
        , %para200 : Ref[Tensor(F32)][256]    # moment2.layers.4.bn1.gamma
        , %para201 : Ref[Tensor(F32)][256]    # moment2.layers.4.bn1.beta
        , %para202 : Ref[Tensor(F32)][256, 256, 1, 1]    # moment2.layers.4.conv2.weight
        , %para203 : Ref[Tensor(F32)][256]    # moment2.layers.4.bn2.gamma
        , %para204 : Ref[Tensor(F32)][256]    # moment2.layers.4.bn2.beta
        , %para205 : Ref[Tensor(F32)][256, 1, 3, 3]    # moment2.layers.5.conv1.weight
        , %para206 : Ref[Tensor(F32)][256]    # moment2.layers.5.bn1.gamma
        , %para207 : Ref[Tensor(F32)][256]    # moment2.layers.5.bn1.beta
        , %para208 : Ref[Tensor(F32)][512, 256, 1, 1]    # moment2.layers.5.conv2.weight
        , %para209 : Ref[Tensor(F32)][512]    # moment2.layers.5.bn2.gamma
        , %para210 : Ref[Tensor(F32)][512]    # moment2.layers.5.bn2.beta
        , %para211 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.6.conv1.weight
        , %para212 : Ref[Tensor(F32)][512]    # moment2.layers.6.bn1.gamma
        , %para213 : Ref[Tensor(F32)][512]    # moment2.layers.6.bn1.beta
        , %para214 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment2.layers.6.conv2.weight
        , %para215 : Ref[Tensor(F32)][512]    # moment2.layers.6.bn2.gamma
        , %para216 : Ref[Tensor(F32)][512]    # moment2.layers.6.bn2.beta
        , %para217 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.7.conv1.weight
        , %para218 : Ref[Tensor(F32)][512]    # moment2.layers.7.bn1.gamma
        , %para219 : Ref[Tensor(F32)][512]    # moment2.layers.7.bn1.beta
        , %para220 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment2.layers.7.conv2.weight
        , %para221 : Ref[Tensor(F32)][512]    # moment2.layers.7.bn2.gamma
        , %para222 : Ref[Tensor(F32)][512]    # moment2.layers.7.bn2.beta
        , %para223 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.8.conv1.weight
        , %para224 : Ref[Tensor(F32)][512]    # moment2.layers.8.bn1.gamma
        , %para225 : Ref[Tensor(F32)][512]    # moment2.layers.8.bn1.beta
        , %para226 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment2.layers.8.conv2.weight
        , %para227 : Ref[Tensor(F32)][512]    # moment2.layers.8.bn2.gamma
        , %para228 : Ref[Tensor(F32)][512]    # moment2.layers.8.bn2.beta
        , %para229 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.9.conv1.weight
        , %para230 : Ref[Tensor(F32)][512]    # moment2.layers.9.bn1.gamma
        , %para231 : Ref[Tensor(F32)][512]    # moment2.layers.9.bn1.beta
        , %para232 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment2.layers.9.conv2.weight
        , %para233 : Ref[Tensor(F32)][512]    # moment2.layers.9.bn2.gamma
        , %para234 : Ref[Tensor(F32)][512]    # moment2.layers.9.bn2.beta
        , %para235 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.10.conv1.weight
        , %para236 : Ref[Tensor(F32)][512]    # moment2.layers.10.bn1.gamma
        , %para237 : Ref[Tensor(F32)][512]    # moment2.layers.10.bn1.beta
        , %para238 : Ref[Tensor(F32)][512, 512, 1, 1]    # moment2.layers.10.conv2.weight
        , %para239 : Ref[Tensor(F32)][512]    # moment2.layers.10.bn2.gamma
        , %para240 : Ref[Tensor(F32)][512]    # moment2.layers.10.bn2.beta
        , %para241 : Ref[Tensor(F32)][512, 1, 3, 3]    # moment2.layers.11.conv1.weight
        , %para242 : Ref[Tensor(F32)][512]    # moment2.layers.11.bn1.gamma
        , %para243 : Ref[Tensor(F32)][512]    # moment2.layers.11.bn1.beta
        , %para244 : Ref[Tensor(F32)][1024, 512, 1, 1]    # moment2.layers.11.conv2.weight
        , %para245 : Ref[Tensor(F32)][1024]    # moment2.layers.11.bn2.gamma
        , %para246 : Ref[Tensor(F32)][1024]    # moment2.layers.11.bn2.beta
        , %para247 : Ref[Tensor(F32)][1024, 1, 3, 3]    # moment2.layers.12.conv1.weight
        , %para248 : Ref[Tensor(F32)][1024]    # moment2.layers.12.bn1.gamma
        , %para249 : Ref[Tensor(F32)][1024]    # moment2.layers.12.bn1.beta
        , %para250 : Ref[Tensor(F32)][1024, 1024, 1, 1]    # moment2.layers.12.conv2.weight
        , %para251 : Ref[Tensor(F32)][1024]    # moment2.layers.12.bn2.gamma
        , %para252 : Ref[Tensor(F32)][1024]    # moment2.layers.12.bn2.beta
        , %para253 : Ref[Tensor(F32)][10, 1024]    # moment2.linear.weight
        , %para254 : Ref[Tensor(F32)][10]    # moment2.linear.bias
        , %para255 : Ref[Tensor(F32)][]    # learning_rate
        , %para256 : Ref[Tensor(F32)][32]    # bn1.moving_mean
        , %para257 : Ref[Tensor(F32)][32]    # bn1.moving_variance
        , %para258 : Ref[Tensor(F32)][64]    # layers.0.bn2.moving_mean
        , %para259 : Ref[Tensor(F32)][64]    # layers.0.bn2.moving_variance
        , %para260 : Ref[Tensor(F32)][128]    # layers.1.bn2.moving_mean
        , %para261 : Ref[Tensor(F32)][128]    # layers.1.bn2.moving_variance
        , %para262 : Ref[Tensor(F32)][128]    # layers.2.bn2.moving_mean
        , %para263 : Ref[Tensor(F32)][128]    # layers.2.bn2.moving_variance
        , %para264 : Ref[Tensor(F32)][256]    # layers.3.bn2.moving_mean
        , %para265 : Ref[Tensor(F32)][256]    # layers.3.bn2.moving_variance
        , %para266 : Ref[Tensor(F32)][256]    # layers.4.bn2.moving_mean
        , %para267 : Ref[Tensor(F32)][256]    # layers.4.bn2.moving_variance
        , %para268 : Ref[Tensor(F32)][512]    # layers.5.bn2.moving_mean
        , %para269 : Ref[Tensor(F32)][512]    # layers.5.bn2.moving_variance
        , %para270 : Ref[Tensor(F32)][512]    # layers.6.bn2.moving_mean
        , %para271 : Ref[Tensor(F32)][512]    # layers.6.bn2.moving_variance
        , %para272 : Ref[Tensor(F32)][512]    # layers.7.bn2.moving_mean
        , %para273 : Ref[Tensor(F32)][512]    # layers.7.bn2.moving_variance
        , %para274 : Ref[Tensor(F32)][512]    # layers.8.bn2.moving_mean
        , %para275 : Ref[Tensor(F32)][512]    # layers.8.bn2.moving_variance
        , %para276 : Ref[Tensor(F32)][512]    # layers.9.bn2.moving_mean
        , %para277 : Ref[Tensor(F32)][512]    # layers.9.bn2.moving_variance
        , %para278 : Ref[Tensor(F32)][512]    # layers.10.bn2.moving_mean
        , %para279 : Ref[Tensor(F32)][512]    # layers.10.bn2.moving_variance
        , %para280 : Ref[Tensor(F32)][1024]    # layers.11.bn2.moving_mean
        , %para281 : Ref[Tensor(F32)][1024]    # layers.11.bn2.moving_variance
        , %para282 : Ref[Tensor(F32)][1024]    # layers.12.bn2.moving_mean
        , %para283 : Ref[Tensor(F32)][1024]    # layers.12.bn2.moving_variance
        , %para284 : Ref[Tensor(F32)][32]    # layers.0.bn1.moving_mean
        , %para285 : Ref[Tensor(F32)][32]    # layers.0.bn1.moving_variance
        , %para286 : Ref[Tensor(F32)][64]    # layers.1.bn1.moving_mean
        , %para287 : Ref[Tensor(F32)][64]    # layers.1.bn1.moving_variance
        , %para288 : Ref[Tensor(F32)][128]    # layers.2.bn1.moving_mean
        , %para289 : Ref[Tensor(F32)][128]    # layers.2.bn1.moving_variance
        , %para290 : Ref[Tensor(F32)][128]    # layers.3.bn1.moving_mean
        , %para291 : Ref[Tensor(F32)][128]    # layers.3.bn1.moving_variance
        , %para292 : Ref[Tensor(F32)][256]    # layers.4.bn1.moving_mean
        , %para293 : Ref[Tensor(F32)][256]    # layers.4.bn1.moving_variance
        , %para294 : Ref[Tensor(F32)][256]    # layers.5.bn1.moving_mean
        , %para295 : Ref[Tensor(F32)][256]    # layers.5.bn1.moving_variance
        , %para296 : Ref[Tensor(F32)][512]    # layers.6.bn1.moving_mean
        , %para297 : Ref[Tensor(F32)][512]    # layers.6.bn1.moving_variance
        , %para298 : Ref[Tensor(F32)][512]    # layers.7.bn1.moving_mean
        , %para299 : Ref[Tensor(F32)][512]    # layers.7.bn1.moving_variance
        , %para300 : Ref[Tensor(F32)][512]    # layers.8.bn1.moving_mean
        , %para301 : Ref[Tensor(F32)][512]    # layers.8.bn1.moving_variance
        , %para302 : Ref[Tensor(F32)][512]    # layers.9.bn1.moving_mean
        , %para303 : Ref[Tensor(F32)][512]    # layers.9.bn1.moving_variance
        , %para304 : Ref[Tensor(F32)][512]    # layers.10.bn1.moving_mean
        , %para305 : Ref[Tensor(F32)][512]    # layers.10.bn1.moving_variance
        , %para306 : Ref[Tensor(F32)][512]    # layers.11.bn1.moving_mean
        , %para307 : Ref[Tensor(F32)][512]    # layers.11.bn1.moving_variance
        , %para308 : Ref[Tensor(F32)][1024]    # layers.12.bn1.moving_mean
        , %para309 : Ref[Tensor(F32)][1024]    # layers.12.bn1.moving_variance
    ) {
    %1 : Tuple[Tensor(F32),Tensor(I32)] = Primitive::MakeTuple{prim_type=1}(%para1, %para2)    #(Tensor(F32)[256, 3, 32, 32], Tensor(I32)[256]) #scope: Default
      # #[CNode]13

#------------------------> 0
    %2 = UnpackCall::unpack_call(FuncGraph::fg_14, %1)    #(Func, Tuple[Tensor(F32),Tensor(I32)])    # fg_14=construct.14 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#[CNode]15
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#[CNode]16
}
# order:
#   1: construct_wrapper.1:[CNode]15{[0]: ValueNode<UnpackCall> unpack_call, [1]: ValueNode<FuncGraph> construct.14, [2]: [CNode]13}
#   2: construct_wrapper.1:[CNode]16{[0]: ValueNode<Primitive> Return, [1]: [CNode]15}


# [No.2] UnpackCall.2
# 
funcgraph fg_2(
        %para310 : Func    # 3
        , %para311 : Tuple[Tensor(F32),Tensor(I32)]    # 4
    ) {
    %1 : Tensor(F32)[256, 3, 32, 32] = Primitive::TupleGetItem{prim_type=1}(%para311, I64(0))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
      # #17
    %2 : Tensor(I32)[256] = Primitive::TupleGetItem{prim_type=1}(%para311, I64(1))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
      # #18

#------------------------> 1
    %3 = %para310(%1, %2)    #(Tensor(F32)[256, 3, 32, 32], Tensor(I32)[256]) #scope: Default
      # #19
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # #20
}
# order:
#   1: UnpackCall.2:19{[0]: 3, [1]: 17, [2]: 18}
#   2: UnpackCall.2:20{[0]: ValueNode<Primitive> Return, [1]: 19}


# [No.3] construct.5
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(376)/    def construct(self, *inputs):/
funcgraph fg_5[fg_1](
        %para312 : Tensor(F32)[256, 3, 32, 32]    # inputs0
        , %para313 : Tensor(I32)[256]    # inputs1
    ) {
    %1 : Bool = FuncGraph::fg_21(Bool(0))    #(Bool)    # fg_21=bool_.21 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#22
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_23, FuncGraph::fg_6)    #(Bool, Func, Func)    # fg_23=✓construct.23, fg_6=✗construct.6 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#[CNode]24

#------------------------> 2
    %3 = %2() #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#[CNode]25
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/#[CNode]26
}
# order:
#   1: construct.5:22{[0]: ValueNode<FuncGraph> bool_.21, [1]: ValueNode<BoolImm> false}
#   2: construct.5:[CNode]24{[0]: ValueNode<Primitive> Switch, [1]: 22, [2]: ValueNode<FuncGraph> ✓construct.23, [3]: ValueNode<FuncGraph> ✗construct.6}
#   3: construct.5:[CNode]25{[0]: [CNode]24}
#   4: construct.5:[CNode]26{[0]: ValueNode<Primitive> Return, [1]: [CNode]25}


# [No.4] ✗construct.6
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(377)/        if self.freeze:/
funcgraph fg_6[fg_5](
) {
    %1 : Bool = FuncGraph::fg_21(Bool(0))    #(Bool)    # fg_21=bool_.21 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#27
    %2 : Func = Primitive::Switch{prim_type=1}(%1, FuncGraph::fg_28, FuncGraph::fg_7)    #(Bool, Func, Func)    # fg_28=✓✗construct.28, fg_7=✗✗construct.7 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#[CNode]29

#------------------------> 3
    %3 = %2() #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#[CNode]30
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#[CNode]31
}
# order:
#   1: ✗construct.6:loss{[0]: ValueNode<UnpackCall> unpack_call, [1]: ValueNode<FuncGraph> construct.11, [2]: [CNode]32}
#   2: ✗construct.6:[CNode]33{[0]: ValueNode<Primitive> getattr, [1]: loss, [2]: ValueNode<StringImm> dtype}
#   3: ✗construct.6:[CNode]34{[0]: ValueNode<Primitive> getattr, [1]: loss, [2]: ValueNode<StringImm> shape}
#   4: ✗construct.6:sens{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Fill, [1]: [CNode]33, [2]: [CNode]34, [3]: ValueNode<FP32Imm> 1.000000}
#   5: ✗construct.6:[CNode]35{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: sens}
#   6: ✗construct.6:grads{[0]: ValueNode<UnpackGraphPrimitive> UnpackGraph, [1]: ValueNode<FuncGraph> construct.11, [2]: [CNode]32, [3]: [CNode]35}
#   7: ✗construct.6:grads{[0]: ValueNode<DoSignaturePrimitive> S-Prim-grad, [1]: grads, [2]: [CNode]36}
#   8: ✗construct.6:grads{[0]: ValueNode<UnpackCall> unpack_call, [1]: grads, [2]: [CNode]32, [3]: [CNode]35}
#   9: ✗construct.6:grads{[0]: ValueNode<DoSignaturePrimitive> S-Prim-identity, [1]: grads}
#  10: ✗construct.6:27{[0]: ValueNode<FuncGraph> bool_.21, [1]: ValueNode<BoolImm> false}
#  11: ✗construct.6:[CNode]29{[0]: ValueNode<Primitive> Switch, [1]: 27, [2]: ValueNode<FuncGraph> ✓✗construct.28, [3]: ValueNode<FuncGraph> ✗✗construct.7}
#  12: ✗construct.6:[CNode]30{[0]: [CNode]29}
#  13: ✗construct.6:[CNode]31{[0]: ValueNode<Primitive> Return, [1]: [CNode]30}


# [No.5] ✗✗construct.7
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/
funcgraph fg_7[fg_6](
) {
    %1 : $(✗✗construct.7):Tuple[Tensor(F32),Tensor(I32)] = Primitive::MakeTuple{prim_type=1}(%para312, %para313)    #(Tensor(F32)[256, 3, 32, 32], Tensor(I32)[256]) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(384)/            loss = self.freeze_nets[step](*inputs)/#[CNode]32

#------------------------> 4
    %2 = $(✗✗construct.7):UnpackCall::unpack_call(FuncGraph::fg_11, %1)    #(Func, Tuple[Tensor(F32),Tensor(I32)])    # fg_11=construct.11 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(390)/            loss = self.network(*inputs)/#loss
    %3 = $(✗✗construct.7):Primitive::getattr{prim_type=1}(%2, "dtype")    #(Undefined, Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(391)/            sens = F.fill(loss.dtype, loss.shape, self.sens)/#[CNode]33
    %4 = $(✗✗construct.7):Primitive::getattr{prim_type=1}(%2, "shape")    #(Undefined, Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(391)/            sens = F.fill(loss.dtype, loss.shape, self.sens)/#[CNode]34
    %5 = $(✗✗construct.7):DoSignaturePrimitive::S-Prim-Fill{prim_type=1}(%3, %4, F32(1))    #(Undefined, Undefined, Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(391)/            sens = F.fill(loss.dtype, loss.shape, self.sens)/#sens
    %6 = $(✗✗construct.7):DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(392)/            grads = self.grad(self.network, self.weights)(*inputs, sens)/#[CNode]35
    %7 = $(✗✗construct.7):UnpackGraphPrimitive::UnpackGraph{prim_type=1}(FuncGraph::fg_11, %1, %6)    #(Undefined, Tuple[Tensor(F32),Tensor(I32)], Undefined)    # fg_11=construct.11 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(392)/            grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %8 = $(✗✗construct.7):Primitive::MakeTuple{prim_type=1}(%para4, %para5, %para6, %para7, %para8, %para9, %para10, %para11, %para12, %para13, %para14, %para15, %para16, %para17, %para18, %para19, %para20, %para21, %para22, %para23, %para24, %para25, %para26, %para27, %para28, %para29, %para30, %para31, %para32, %para33, %para34, %para35, %para36, %para37, %para38, %para39, %para40, %para41, %para42, %para43, %para44, %para45, %para46, %para47, %para48, %para49, %para50, %para51, %para52, %para53, %para54, %para55, %para56, %para57, %para58, %para59, %para60, %para61, %para62, %para63, %para64, %para65, %para66, %para67, %para68, %para69, %para70, %para71, %para72, %para73, %para74, %para75, %para76, %para77, %para78, %para79, %para80, %para81, %para82, %para83, %para84, %para85, %para86)    #(Ref[Tensor(F32)][32, 3, 3, 3], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32, 1, 3, 3], Ref[Tensor(F32)][32], Ref[Tensor(F32)][32], Ref[Tensor(F32)][64, 32, 1, 1], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64, 1, 3, 3], Ref[Tensor(F32)][64], Ref[Tensor(F32)][64], Ref[Tensor(F32)][128, 64, 1, 1], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128, 1, 3, 3], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128, 128, 1, 1], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128, 1, 3, 3], Ref[Tensor(F32)][128], Ref[Tensor(F32)][128], Ref[Tensor(F32)][256, 128, 1, 1], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256, 1, 3, 3], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256, 256, 1, 1], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256, 1, 3, 3], Ref[Tensor(F32)][256], Ref[Tensor(F32)][256], Ref[Tensor(F32)][512, 256, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 512, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 512, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 512, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 512, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 512, 1, 1], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512, 1, 3, 3], Ref[Tensor(F32)][512], Ref[Tensor(F32)][512], Ref[Tensor(F32)][1024, 512, 1, 1], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][1024, 1, 3, 3], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][1024, 1024, 1, 1], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][1024], Ref[Tensor(F32)][10, 1024], Ref[Tensor(F32)][10]) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(392)/            grads = self.grad(self.network, self.weights)(*inputs, sens)/#[CNode]36
    %9 = $(✗✗construct.7):DoSignaturePrimitive::S-Prim-grad{prim_type=1}(%7, %8)    #(Undefined, Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(392)/            grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %10 = $(✗✗construct.7):UnpackCall::unpack_call(%9, %1, %6)    #(Undefined, Tuple[Tensor(F32),Tensor(I32)], Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(392)/            grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %11 = $(✗✗construct.7):DoSignaturePrimitive::S-Prim-identity{prim_type=1}[side_effect_propagate=I64(1)](%10)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(393)/            grads = self.grad_reducer(grads)/#grads
    %12 = FuncGraph::fg_37(%11)    #(Undefined)    # fg_37=construct.37 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(397)/                loss = F.depend(loss, self.optimizer(grads))/#[CNode]38
    %13 = DoSignaturePrimitive::S-Prim-Depend{prim_type=1}[side_effect_propagate=I64(1)](%2, %12)    #(Undefined, Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(397)/                loss = F.depend(loss, self.optimizer(grads))/#loss
    %14 = FuncGraph::fg_39(%13)    #(Undefined)    # fg_39=↓✗construct.39 #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#[CNode]40
    Primitive::Return{prim_type=1}(%14)    #(Undefined) #scope: Default
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(394)/            if self.use_grad_accumulation:/#[CNode]41
}
# order:
#   1: ✗✗construct.7:[CNode]38{[0]: ValueNode<FuncGraph> construct.37, [1]: grads}
#   2: ✗✗construct.7:loss{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Depend, [1]: loss, [2]: [CNode]38}
#   3: ✗✗construct.7:[CNode]40{[0]: ValueNode<FuncGraph> ↓✗construct.39, [1]: loss}
#   4: ✗✗construct.7:[CNode]41{[0]: ValueNode<Primitive> Return, [1]: [CNode]40}


# [No.6] UnpackCall.8
# 
funcgraph fg_8(
        %para314 : Func    # 9
        , %para315 : Tuple[Tensor(F32),Tensor(I32)]    # 10
    ) {
    %1 : Tensor(F32)[256, 3, 32, 32] = Primitive::TupleGetItem{prim_type=1}(%para315, I64(0))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
      # #42
    %2 : Tensor(I32)[256] = Primitive::TupleGetItem{prim_type=1}(%para315, I64(1))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
      # #43

#------------------------> 5
    %3 = %para314(%1, %2)    #(Tensor(F32)[256, 3, 32, 32], Tensor(I32)[256]) #scope: Default
      # #44
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
      # #45
}
# order:
#   1: UnpackCall.8:44{[0]: 9, [1]: 42, [2]: 43}
#   2: UnpackCall.8:45{[0]: ValueNode<Primitive> Return, [1]: 44}


# [No.7] construct.11
# In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(111)/    def construct(self, data, label):/
funcgraph fg_11[fg_1](
        %para316 : Tensor(F32)[256, 3, 32, 32]    # data
        , %para317 : Tensor(I32)[256]    # label
    ) {

#------------------------> 6
    %1 = FuncGraph::fg_12(%para316)    #(Tensor(F32)[256, 3, 32, 32])    # fg_12=construct.12 #scope: Default/network-WithLossCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(112)/        out = self._backbone(data)/#out
    %2 = FuncGraph::fg_46(%1, %para317)    #(Undefined, Tensor(I32)[256])    # fg_46=construct.46 #scope: Default/network-WithLossCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(113)/        return self._loss_fn(out, label)/#[CNode]47
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/network-WithLossCell
      # In file /usr/local/python-3.7.5/lib/python3.7/site-packages/mindspore/nn/wrap/cell_wrapper.py(113)/        return self._loss_fn(out, label)/#[CNode]48
}
# order:
#   1: construct.11:out{[0]: ValueNode<FuncGraph> construct.12, [1]: data}
#   2: construct.11:[CNode]47{[0]: ValueNode<FuncGraph> construct.46, [1]: out, [2]: label}
#   3: construct.11:[CNode]48{[0]: ValueNode<Primitive> Return, [1]: [CNode]47}


# [No.8] construct.12
# In file /app/api-test/model/mobilenetv1.py(47)/    def construct(self, x):/
funcgraph fg_12[fg_1](
        %para318 : Tensor(F32)[256, 3, 32, 32]    # x
    ) {

#------------------------> 7
    %1 = ClassType() #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]49
    %2 = ClassType(I64(2), I64(2), "valid")    #(Undefined, Undefined, Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(50)/        out = P.AvgPool(2, 2, 'valid')(out)/#[CNode]50
    %3 = ClassType() #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(48)/        out = P.ReLU()(self.bn1(self.conv1(x)))/#[CNode]51
    %4 = FuncGraph::fg_52(%para318)    #(Tensor(F32)[256, 3, 32, 32])    # fg_52=construct.52 #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(48)/        out = P.ReLU()(self.bn1(self.conv1(x)))/#[CNode]53
    %5 = FuncGraph::fg_54(%4)    #(Undefined)    # fg_54=construct.54 #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(48)/        out = P.ReLU()(self.bn1(self.conv1(x)))/#[CNode]55
    %6 = %3(%5)    #(Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(48)/        out = P.ReLU()(self.bn1(self.conv1(x)))/#out
    %7 = FuncGraph::fg_56(%6)    #(Undefined)    # fg_56=construct.56 #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(49)/        out = self.layers(out)/#out
    %8 = %2(%7)    #(Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(50)/        out = P.AvgPool(2, 2, 'valid')(out)/#out
    %9 = ClassType() #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]57
    %10 = %9(%8)    #(Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]58
    %11 = DoSignaturePrimitive::S-Prim-getitem{prim_type=1}(%10, I64(0))    #(Undefined, Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]59
    %12 = DoSignaturePrimitive::S-Prim-negative{prim_type=1}(I64(1))    #(Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]60
    %13 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%11, %12)    #(Undefined, Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#[CNode]61
    %14 = %1(%8, %13)    #(Undefined, Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(51)/        out = P.Reshape()(out, (P.Shape()(out)[0], -1,))/#out
    %15 = FuncGraph::fg_62(%14)    #(Undefined)    # fg_62=construct.62 #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(52)/        out = self.linear(out)/#out
    Primitive::Return{prim_type=1}(%15)    #(Undefined) #scope: Default/network-WithLossCell/_backbone-MobileNetV1
      # In file /app/api-test/model/mobilenetv1.py(53)/        return out/#[CNode]63
}
# order:
#   1: construct.12:[CNode]51{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.nn_ops.ReLU'}
#   2: construct.12:[CNode]53{[0]: ValueNode<FuncGraph> construct.52, [1]: x}
#   3: construct.12:[CNode]55{[0]: ValueNode<FuncGraph> construct.54, [1]: [CNode]53}
#   4: construct.12:out{[0]: [CNode]51, [1]: [CNode]55}
#   5: construct.12:out{[0]: ValueNode<FuncGraph> construct.56, [1]: out}
#   6: construct.12:[CNode]50{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.nn_ops.AvgPool', [1]: ValueNode<Int64Imm> 2, [2]: ValueNode<Int64Imm> 2, [3]: ValueNode<StringImm> valid}
#   7: construct.12:out{[0]: [CNode]50, [1]: out}
#   8: construct.12:[CNode]49{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Reshape'}
#   9: construct.12:[CNode]57{[0]: ValueNode<ClassType> class 'mindspore.ops.operations.array_ops.Shape'}
#  10: construct.12:[CNode]58{[0]: [CNode]57, [1]: out}
#  11: construct.12:[CNode]59{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]58, [2]: ValueNode<Int64Imm> 0}
#  12: construct.12:[CNode]60{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#  13: construct.12:[CNode]61{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: [CNode]59, [2]: [CNode]60}
#  14: construct.12:out{[0]: [CNode]49, [1]: out, [2]: [CNode]61}
#  15: construct.12:out{[0]: ValueNode<FuncGraph> construct.62, [1]: out}
#  16: construct.12:[CNode]63{[0]: ValueNode<Primitive> Return, [1]: out}


#===============================================================================
# num of function graphs in stack: 8
